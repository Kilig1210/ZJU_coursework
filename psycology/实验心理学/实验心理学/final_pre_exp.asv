%%  创建cell数组保存数据

data = cell(40,7);  %   第一列TrailNum，存放试次序号
                    %   第二列SubName，存放被试性别
                    %   第二列SubSex，存放被试性别
                    %   第四列SubAge，存放被试年龄
                    %   第五列GraOrientation，记录光栅朝向0为竖直，1为水平
                    %   第六列RespOrientation，记录被试反应0为反应错误，1为反应正确
                    %   第七列GraContrast，记录光栅对比度
prompt = {'SubName','SubSex[m, f]','SubAge'};
title = 'Exp Info'; 
definput = {'','','',''}; 
data(1:40, 2:4) = repmat(inputdlg(prompt,title,[1, 50],definput)', 40, 1);
for i = 1:40    
    data{i, 5} = round(rand(1));
end
for ii = 1:40
    data{ii, 1} = ii;
end
%%  设置按键信息
KbName('UnifyKeyNames');
key.escape = KbName('escape');
key.f = KbName('f');
key.j = KbName('j');

%%  设置指导与结束语
guide_text.start = '欢迎你参加实验\n\n请判断光栅朝向！\n\n如认为水平请按F键，认为竖直请按J键\n\n先进行练习，按任意键开始！';
guide_text.lxend = '练习结束，开始正式实验!\n\n按任意键继续！';
guide_text.end = '实验结束！\n\n谢谢您的参与！';
guide_text.judgment = '请判断';

%%  设置窗口
background=128;
Screen('Preference', 'SkipSyncTests', 1);
[windowPtr, windowRect]=Screen('OpenWindow', 0, background);
HideCursor;
[x_center, y_center] = RectCenter(windowRect);
hz=Screen('FrameRate',windowPtr);   %获取当前刷新率
frame_dur=1/hz;                     %单位，秒

%%  设置刺激呈现时间
fixation_dur = 300;     %注视点呈现时间  300ms
mask_dur = 300;         %视觉掩蔽的时间  300ms
grating_dur_1 = 1000;   %光栅1呈现时间  1000ms
grating_dur_2 = 300;    %光栅2呈现时间  300ms

%%  设置mask的信息
mask_contrast=0.45; %对比度

DistanceToScreen=40; %屏幕距离 厘米
WidthOfScreen=29.5; %屏幕宽度 厘米
XResolution=windowRect(3); %屏幕水平分辨率
pixelsize=atan((WidthOfScreen/XResolution)/DistanceToScreen)*180/pi;%计算每个像素的度数
pixelsperdeg=1/pixelsize;%每度视角有多少个像素
SpatialPeriod=round(pixelsperdeg/1); % 1 cycles/degree, 光栅每个周期的像素数
mask_size=SpatialPeriod;%刺激大小
noise_pix=5;%每个噪音点的像素数；
noise_num=round(mask_size/noise_pix);%水平或竖直方向上的噪音点个数
mask_size=noise_pix*noise_num;%重新计算刺激大小
mask_pos=CenterRect([0 0 mask_size mask_size],windowRect);%%刺激呈现于屏幕中央,刺激的位置矩阵
[x,y]=meshgrid(round(-mask_size/2):round(mask_size/2)-1,round(-mask_size/2):round(mask_size/2)-1);
mask_mask_radius=mask_size/2;
sd=50;
mask_circle_mask=(x.^2+y.^2 <= mask_mask_radius^2);%生成圆形mask
noise_matrix=rand(noise_num,noise_num)*2-1;
temp0=ones(noise_pix);
mask_matrix0=kron(noise_matrix,temp0);%生成像素噪音点，值范围-1~1; kron命令是扩大每个noise元素的值为设定的噪音像素大小
mask_matrix=background*(1+mask_contrast*mask_matrix0.*mask_circle_mask); %刺激矩阵
mask_texture=Screen('MakeTexture',windowPtr, mask_matrix);%把矩阵变为纹理


%%  光栅参数初始化
angle = [0, 90];
grating_size = 200;
grating_pos=CenterRect([0 0 grating_size grating_size],windowRect);
grating_contrast_1 = 0.005;
grating_contrast_test=0.1;

%%  QUEST参数初始化
contrast_log = log10(grating_contrast_1);
tGuess = contrast_log;
tGuessSd = 0.5;
pThreshold=0.82;
beta=3.5;delta=0.01;gamma=0.5;
q=QuestCreate(tGuess,tGuessSd,pThreshold,beta,delta,gamma);
q.normalizePdf=1;

%%  刺激呈现
%%% 呈现开始提示语
Screen('TextSize',windowPtr,40);
Screen('TextFont',windowPtr,'Simsun');
DrawFormattedText(windowPtr,double(guide_text.start),'center','center',[0]);
Screen('Flip', windowPtr); 
%while KbCheck end
KbWait;

%% 练习
for trials_test = 1:10
    grating_contrast_1 = grating_contrast_test;
    grating_angle = angle(randi(2));
    %%% 呈现注视点
    for fixation = 1:(fixation_dur/1000)*hz
        CrossFixaPoitRect1=CenterRect([0 0 40 12],windowRect);
        CrossFixaPoitRect2=CenterRect([0 0 12 40  ],windowRect);
        PoitRect = CenterRect([0, 0, 10, 10], windowRect);
        Screen('FillRect', windowPtr, [0,0,0], CrossFixaPoitRect1);
        Screen('FillRect', windowPtr, [0,0,0], CrossFixaPoitRect2);
        Screen('flip',windowPtr);%呈现
    end
    
    %%% 呈现视觉掩蔽
    for mask_1 = 1:(mask_dur/1000)*hz
          Screen('DrawTexture',windowPtr,mask_texture,[],mask_pos);%画纹理
          Screen(windowPtr,'Flip');%呈现刺激
    end

    %%% 呈现光栅1
    for grating_1 = 1:(grating_dur_1/1000)*hz
          grating_texture_1=  make_texture(grating_contrast_1, grating_size, grating_angle, 50, background, windowPtr);
          Screen('DrawTexture',windowPtr,grating_texture_1,[],grating_pos);%画纹理
          Screen(windowPtr,'Flip');%呈现光栅
    end

    %%% 呈现视觉掩蔽
    for mask_2 = 1:(mask_dur/1000)*hz
          Screen('DrawTexture',windowPtr,mask_texture,[],mask_pos);%画纹理
          Screen(windowPtr,'Flip');%呈现刺激
    end
    Screen(windowPtr,'Flip');
    Screen('TextSize',windowPtr,40);
    Screen('TextFont',windowPtr,'Simsun');
    DrawFormattedText(windowPtr,double(guide_text.judgment),'center','center',[255, 255, 255]);
    Screen('Flip',windowPtr);
    KbWait;
    
    while true 
        [touch,secs,KbCode] =KbCheck;
        if  KbCode(key.f)
           resp = 1;
           
           break;
        elseif KbCode(key.j)
           resp = 2;
           
           break;
        elseif KbCode(key.escape)
           Screen('CloseAll');
           break;
        end
    end
    %按键归类
    if (resp == 1 && grating_angle == 90) || (resp == 2 && grating_angle == 0)
        response = 1;
    else
        response = 0;
    end
    %判断提示

    %正误反馈
    if response == 1
        feed = '练习正确';
        feed_color = [0 255 0];
    else 
        feed = '练习错误';
        feed_color = [255 0 0];
    end

    Screen('TextSize',windowPtr,40);
    Screen('TextFont',windowPtr,'Simsun');
    DrawFormattedText(windowPtr,double(feed),'center','center',feed_color);
    Screen('Flip',windowPtr);
    WaitSecs(3);
   
end
Screen('TextSize',windowPtr,40);
Screen('TextFont',windowPtr,'Simsun');
DrawFormattedText(windowPtr,double(guide_text.lxend),'center','center',feed_color);
Screen('Flip',windowPtr);
KbWait;

%% 正式实验
for trials = 1:40
    tTest = QuestQuantile(q); %quest值
    grating_contrast_1 = 10.^tTest;
    data{trials, 7}=grating_contrast_1;
    grating_angle = angle(data{trials, 5}+1);
    %%% 呈现注视点
    for fixation = 1:(fixation_dur/1000)*hz
        CrossFixaPoitRect1=CenterRect([0 0 40 12],windowRect);
        CrossFixaPoitRect2=CenterRect([0 0 12 40  ],windowRect);
        PoitRect = CenterRect([0, 0, 10, 10], windowRect);
        Screen('FillRect', windowPtr, [0,0,0], CrossFixaPoitRect1);
        Screen('FillRect', windowPtr, [0,0,0], CrossFixaPoitRect2);
        Screen('flip',windowPtr);%呈现
    end
    
    %%% 呈现视觉掩蔽
    for mask_1 = 1:(mask_dur/1000)*hz
          Screen('DrawTexture',windowPtr,mask_texture,[],mask_pos);%画纹理
          Screen(windowPtr,'Flip');%呈现刺激
    end

    %%% 呈现光栅1
    for grating_1 = 1:(grating_dur_1/1000)*hz
          grating_texture_1=  make_texture(grating_contrast_1, grating_size, grating_angle, 50, background, windowPtr);
          Screen('DrawTexture',windowPtr,grating_texture_1,[],grating_pos);%画纹理
          Screen(windowPtr,'Flip');%呈现光栅
    end

    %%% 呈现视觉掩蔽
    for mask_2 = 1:(mask_dur/1000)*hz
          Screen('DrawTexture',windowPtr,mask_texture,[],mask_pos);%画纹理
          Screen(windowPtr,'Flip');%呈现刺激
    end
    Screen(windowPtr,'Flip');
    
    Screen('TextSize',windowPtr,40);
    Screen('TextFont',windowPtr,'Simsun');
    DrawFormattedText(windowPtr,double(guide_text.judgment),'center','center',[255, 255, 255]);
    Screen('Flip',windowPtr);
    KbWait;
    
    while true 
        [touch,secs,KbCode] =KbCheck;
        if  KbCode(key.f)
           resp = 1;
           
           break;
        elseif KbCode(key.j)
           resp = 2;
           
           break;
        elseif KbCode(key.escape)
           Screen('CloseAll');
           break;
        end
    end
    %按键归类
    if (resp == 1 && grating_angle == 90) || (resp == 2 && grating_angle == 0)
        data{trials, 6} = 1;
    else
        data{trials, 6} = 0;
    end
    

    q=QuestUpdate(q,tTest,data{trials, 6}); %更新quest
    threshold_mean = 10.^QuestMean(q);
    threshold_std = 10.^QuestSd(q);
end


%结束语
Screen('TextSize',windowPtr,40);
Screen('TextFont',windowPtr,'Simsun');
DrawFormattedText(windowPtr,double(guide_text.end),'center','center',[255, 255, 255]);
Screen('Flip',windowPtr);
WaitSecs(1.5);
Screen('CloseAll');%关闭窗口

disp(threshold_mean);
% 将数据保存为CSV文件
header = {'TrialNum', 'SubName', 'SubSex', 'SubAge','GraOrientation', 'RespOrientation','GraContrast'};
data_table = cell2table(data, 'VariableNames', header);
exp_data = strcat('data\', 'pre_exp_', char(data{1,2}), '_', date, '.csv');
writetable(data_table, exp_data);

function grating_texture = make_texture(contrast, size, angle, period, background, windowPtr)
    size=300; %光栅大小
    [x,y]=meshgrid(-size/2:size/2,-size/2:size/2);
    period=50;
    space_fre_1=1/period;
    a1=2*pi*space_fre_1*cos(angle*pi/180);
    b1=2*pi*space_fre_1*sin(angle*pi/180);
    mask_radius_1=size/2; 
    circle_mask_1=(x.^2+y.^2 <= mask_radius_1^2);%生成圆形mask
    grating_matrix=background*(1+contrast*sin(a1*x+b1*y).*circle_mask_1);   %生成光栅矩阵
    grating_texture=Screen('MakeTexture',windowPtr, grating_matrix);%把矩阵变为纹理
end